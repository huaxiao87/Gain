/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#ifndef PLUGINPROCESSOR_H_INCLUDED
#define PLUGINPROCESSOR_H_INCLUDED

#include "../JuceLibraryCode/JuceHeader.h"
#include "Vibrato.h"
#include "PPM.h"



//==============================================================================
/**
*/
class GainAudioProcessor  : public AudioProcessor
{
public:
    //==============================================================================
    GainAudioProcessor();
    ~GainAudioProcessor();

    //==============================================================================
    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override;

    void processBlock (AudioSampleBuffer&, MidiBuffer&) override;

    //==============================================================================
    AudioProcessorEditor* createEditor() override;
    bool hasEditor() const override;

    //==============================================================================
    const String getName() const override;

    bool acceptsMidi() const override;
    bool producesMidi() const override;
    bool silenceInProducesSilenceOut() const override;
    double getTailLengthSeconds() const override;

    //==============================================================================
    int getNumPrograms() override;
    int getCurrentProgram() override;
    void setCurrentProgram (int index) override;
    const String getProgramName (int index) override;
    void changeProgramName (int index, const String& newName) override;

    //==============================================================================
    void getStateInformation (MemoryBlock& destData) override;
    void setStateInformation (const void* data, int sizeInBytes) override;


	//==============================================================================
	void setParam(int parameterIndex);

	float m_fVolume;
	float m_fValueModulationAmplitude;
	float m_fValueModulationFrequency;
	bool  m_bIsBypassed;
	bool  m_bParamUpdated;



private:
    //==============================================================================
	JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR(GainAudioProcessor)
		//==============================================================================
	CVibrato *m_cVibrato;
	Error_t m_errorCheck;
    
    CPeakMeter      *m_myPeakMeter;

	int			    m_iNumChannels;
	float			m_fSampleRateInHz = 44100;

	String          m_sContentModulationAmplitude;
	String          m_sContentModulationFrequency;
	AudioParameterFloat* m_audioParaModulationAmplitude;
	AudioParameterFloat* m_audioParaModulationFrequency;

	float **m_ppWritePointer;
};


#endif  // PLUGINPROCESSOR_H_INCLUDED
