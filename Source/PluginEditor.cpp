/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin editor.

  ==============================================================================
*/

#include "../inc/PluginProcessor.h"
#include "../inc/PluginEditor.h"

#include "../JuceLibraryCode/JuceHeader.h"



//==============================================================================
GainAudioProcessorEditor::GainAudioProcessorEditor (GainAudioProcessor& p)
    : AudioProcessorEditor (&p), processor (p)
{
	// This is where our plugin’s editor size is set.
	setSize(250, 320);

	// these define the parameters of our slider object

	initializeSlider(m_sliderModulationAmplitude, 0.0, 1, 0.01, 100, 70, 50, 165, " ");
	initializeSlider(m_sliderModulationFrequency, 0.0, 10.0, 0.1, 170, 70, 50, 165, " Hz");
    initializeLabel(m_sliderModulationAmplitude, m_labelModulationAmplitude, " Amp");
    initializeLabel(m_sliderModulationFrequency, m_labelModulationFrequency, " Freq");
    initializeLabel(m_labelTitle, "Vibrato", 95, 5);
//    initializeButton(m_timeButton, 350, 400);
    initializeToggleButton(m_toggleBypass, 10, 205);
    initializeLabel(m_toggleBypass, m_labelBypass, "Bypass");
    
//    Rectangle< int >::Rectangle	(100,100,100,100);
    Timer::startTimer(10);
}

GainAudioProcessorEditor::~GainAudioProcessorEditor()
{
}

//==============================================================================
void GainAudioProcessorEditor::paint (Graphics& g)
{
	// fill the whole window white
	g.fillAll(Colours::white);

	// set the current drawing colour to black
	g.setColour(Colours::black);

	// set the font size and draw text to the screen
	g.setFont(15.0f);

//    g.setColour (Colours::black);
//    g.fillRect(10, 250, 210, 20);
//    
//    g.setColour (Colours::green);
//    g.fillRect(10, 250, 70, 20);
//    
    int iPeakL = (int)roundFloatToInt(processor.getPeak(0))+88;
    int iPeakR = (int)roundFloatToInt(processor.getPeak(1))+88;
    
//    int iPeakL = 50;
//    int iPeakR = 80;
    
    g.setColour (Colours::black);
    g.fillRect(116, 250, 94, 20);
    
    g.setColour (Colours::green);
    g.fillRect(116, 250, iPeakL, 20);
    

    g.setColour (Colours::black);
    g.fillRect(116, 280, 94, 20);
    
    g.setColour (Colours::green);
    g.fillRect(116, 280, iPeakR , 20);
    
//    m_labelBypass.setText (std::to_string(iPeakL), dontSendNotification);


}

void GainAudioProcessorEditor::resized()
{
    // This is generally where you'll want to lay out the positions of any
    // subcomponents in your editor..
	m_sliderModulationAmplitude.setBounds(40, 30, 20, getHeight() - 60);
}

void GainAudioProcessorEditor::sliderValueChanged(Slider* slider)
{
	processor.m_bParamUpdated = true;
	processor.m_fValueModulationAmplitude = m_sliderModulationAmplitude.getValue();
	processor.m_fValueModulationFrequency = m_sliderModulationFrequency.getValue();
	int numParameters = 2;
	for (int i = 0;i < numParameters;i++)
	{
		processor.setParam(i);
	}
}

void GainAudioProcessorEditor::buttonClicked(Button* button)
{

	processor.m_bIsBypassed = m_toggleBypass.getToggleState();
	String a;
	if (processor.m_bIsBypassed == 1) {
		a = "Bypass Yes";
	}
	else {
		a = "Bypass No";
	}

	m_labelBypass.setText(a, dontSendNotification);
}


void GainAudioProcessorEditor::timerCallback (){
    repaint();
}




void GainAudioProcessorEditor::initializeSlider(Slider &slider, float minValue, float maxValue, float step, int x, int y, int width, int height, const String & suffix)
{
	slider.setSliderStyle(Slider::LinearBarVertical);
	slider.setRange(minValue, maxValue, step);
//	slider.setTextBoxStyle(Slider::NoTextBox, false, 90, 0);
	slider.setPopupDisplayEnabled(true, this);
	//m_sliderModulationAmplitude.setTextValueSuffix("Volume");
	slider.setValue(1.0);

	// this function adds the slider to the editor
	addAndMakeVisible(&slider);
    
    slider.setTextValueSuffix (suffix);

	// add the listener to the slider
	slider.addListener(this);

	// sets the position and size of the slider with arguments (x, y, width, height)
	slider.setBounds(x, y, width, height);
}

void GainAudioProcessorEditor::initializeLabel(Slider &slider, Label &label, const String & name)
{
    addAndMakeVisible (&label);
    label.setText (name, dontSendNotification);
    label.attachToComponent (&slider, false);
}

void GainAudioProcessorEditor::initializeLabel(Button &button, Label &label, const String & name)
{
    addAndMakeVisible (&label);
    label.setText (name, dontSendNotification);
    label.attachToComponent (&button, false);
}

void GainAudioProcessorEditor::initializeLabel(Label &label, const String & name, int x, int y)
{
    addAndMakeVisible (&label);
    label.setText (name, dontSendNotification);
    label.setBounds(x, y, 100, 50);}


void GainAudioProcessorEditor::initializeToggleButton(ToggleButton &toggle, int x, int y)
{
    toggle.addListener (this);
    addAndMakeVisible (&toggle);
    toggle.setBounds(x, y, 80, 20);
    
}


